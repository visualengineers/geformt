/**
 * Namespace declaration for PEG (Parsing Expression Grammar).
 * PEG.js is a parser generator for Javascript developed by David Majda
 * @namespace
 * @see <a href ="http://pegjs.majda.cz/">http://pegjs.majda.cz/</a>[Last checked: 04.08.2011]
 * @version 0.6.1 
 */
var PEG={};

/**
 * Parser module generated by PEG.js.
 * See <a href="http://pegjs.majda.cz/documentation">http://pegjs.majda.cz/documentation</a> for documentation. The following code is the specific GeForMT grammar definition based on syntax definition of PEG:
 * @see <a href ="http://pegjs.majda.cz/documentation">http://pegjs.majda.cz/documentation</a> [Last checked: 04.08.2011]
 * @namespace
 * @example
 * definition = complex:complex opt:(option complex)*
 		{	var definition={options: []};
 			definition.options.push(complex);
 			for (var i=0;i&lt;opt.length;i++){
 				definition.options.push(opt[i][1]);
 			}
 			return definition;
		}
 	
complex = gesture:gesture gestures:(operator gesture)*
 		{	var complex = {relation:null,gestures:[]};
			complex.gestures.push(gesture);
			for(var i=0;i&lt;gestures.length;i++){		
				complex.gestures.push(gestures[i][1]);
				gestures[i][1].operation=gestures[i][0];
			}
		return complex;		
		}
	/rel:relation'[' gesture:gesture gestures:(operator gesture)*']'
		{	var complex = {relation:rel,gestures:[]};
			complex.gestures.push(gesture);
			for(var i=0;i&lt;gestures.length;i++){
				complex.gestures.push(gestures[i][1]);
				gestures[i][1].operation=gestures[i][0];
			}
			return complex;
		}

gesture = func:function'('afo:atomfocus afos:(','atomfocus)*')'
		{	var gesture={funct:func,atomfocus: []};
			gesture.atomfocus.push(afo);
			for(var i=0;i&lt;afos.length;i++){
				gesture.atomfocus.push(afos[i][1]);
			}
			return gesture;
		}
	/afo:atomfocus afos:(','atomfocus)*   
		{	var gesture= {funct:null,atomfocus: []};
			gesture.atomfocus.push(afo);
			for(var i=0;i&lt;afos.length;i++){
				gesture.atomfocus.push(afos[i][1]);
			}
			return gesture;
		}
				
relation = 'CROSS' {return GeForMT.RELATION_TYPES.CROSS;}
	/'JOIN' {return GeForMT.RELATION_TYPES.JOIN;}
	/'SYNC' {return GeForMT.RELATION_TYPES.SYNC;}
	/'SPLIT' {return GeForMT.RELATION_TYPES.SPLIT;}
	/'CONNECT_START' {return GeForMT.RELATION_TYPES.CONNECT_START;}
        /'CONNECT_END' {return GeForMT.RELATION_TYPES.CONNECT_END;}
       /'AMONG' {return GeForMT.RELATION_TYPES.AMONG;}
        /'ASIDE' {return GeForMT.RELATION_TYPES.ASIDE;}
       /'CLOSE' {return GeForMT.RELATION_TYPES.CLOSE;}

atomfocus = atom:atom'('focus:focuslist')'
		{	return {atom:atom,focuslist:focus};}
	/atom:atom
		{	return {atom:atom,focuslist:[]};}
		
focuslist = focus:focus list:(','focus)*
		{	var focuslist=[];
			focuslist.push(focus);
			for(var i=0;i&lt;list.length;i++){
				focuslist.push(list[i][1]);
			}
			return focuslist;
		}
		
focus = focus:[A-Za-z0-9#.:=\|\[\]\*_-]+
		{	return focus.join("");}
		
function = num:integer?functionType:'F'
		{	var func = {type:GeForMT.FUNCTION_TYPES.FINGER,number:null};
			if(typeof num != 'undefined') func['number']=num;
			return func;
		}
	/num:integer?functionType:'H'
		{	var func = {type:GeForMT.FUNCTION_TYPES.HAND,number:null};
			if(typeof num != 'undefined') func['number']=num;
			return func;
		}
	/num:integer?functionType:'B'
		{	var func = {type:GeForMT.FUNCTION_TYPES.BLOB,number:null};
			if(typeof num != 'undefined') func['number']=num;
			return func;
		}
		
operator = '*' {  return GeForMT.OPERATION_TYPES.ASTERISK;}
	/'+' {  return GeForMT.OPERATION_TYPES.PLUS;}
	/',' {  return GeForMT.OPERATION_TYPES.COMMA;}
	/';' {  return GeForMT.OPERATION_TYPES.SEMICOLON;}

option = '|' {  return GeForMT.OPERATION_TYPES.OPTION;}

atom = identifier:identifier 
		{	var atom = {type:identifier};
			return atom;
		}
	/vector:vector directionType:('_'direction)? 
		{	var atom={type: vector, direction: null};
			if(typeof directionType != 'undefined') 
				atom['direction']=directionType[1];
			return atom;
		}
	/shape:shape directionType:('_'direction)?rotationType:('_'rotation)?
		{	var atom={type: shape, direction: null, rotation: null};
			if(typeof directionType != 'undefined')
				atom['direction']=directionType[1];
			if(typeof rotationType != 'undefined') 
				atom['rotation']=rotationType[1];
			return atom;
		}
		
identifier = 'MOVE' {return GeForMT.CONTACT_TYPES.MOVE;}
	/ 'POINT' {return GeForMT.CONTACT_TYPES.POINT;}
	/ 'DEPOINT' {return GeForMT.CONTACT_TYPES.DEPOINT;}
	/ 'HOLD' {return GeForMT.CONTACT_TYPES.HOLD;}

vector = 'LINE' {return GeForMT.VECTOR_TYPES.LINE;}

shape =	'CIRCLE' {return GeForMT.SHAPE_TYPES.CIRCLE;}
	/ 'SEMICIRCLE' {return GeForMT.SHAPE_TYPES.SEMICIRCLE;}

direction =	'NORTH' {return GeForMT.DIRECTION_TYPES.NORTH;}
	/'NORTHEAST' {return GeForMT.DIRECTION_TYPES.NORTHEAST;}
	/'EAST' {return GeForMT.DIRECTION_TYPES.EAST;}
	/'SOUTHEAST' {return GeForMT.DIRECTION_TYPES.SOUTHEAST;}
	/'SOUTH' {return GeForMT.DIRECTION_TYPES.SOUTH;}
	/'SOUTHWEST' {return GeForMT.DIRECTION_TYPES.SOUTHWEST;}
	/'WEST' {return GeForMT.DIRECTION_TYPES.WEST;}
	/'NORTHWEST' {return GeForMT.DIRECTION_TYPES.NORTHWEST;}
	/'NE' {return GeForMT.DIRECTION_TYPES.NORTHEAST;}
	/'SE' {return GeForMT.DIRECTION_TYPES.SOUTHEAST;}
	/'SW' {return GeForMT.DIRECTION_TYPES.SOUTHWEST;}
	/'NW' {return GeForMT.DIRECTION_TYPES.NORTHWEST;}
	/'N&deg;' {return GeForMT.DIRECTION_TYPES.TEND_NORTH;}
	/'N' {return GeForMT.DIRECTION_TYPES.NORTH;}
	/'E&deg;' {return GeForMT.DIRECTION_TYPES.TEND_EAST;}
	/'E' {return GeForMT.DIRECTION_TYPES.EAST;}
	/'W&deg;' {return GeForMT.DIRECTION_TYPES.TEND_WEST;}
	/'W' {return GeForMT.DIRECTION_TYPES.WEST;}
	/'S&deg;' {return GeForMT.DIRECTION_TYPES.TEND_SOUTH;}
	/'S' {return GeForMT.DIRECTION_TYPES.SOUTH;}

rotation = 'CLOCKWISE' {return GeForMT.ROTATION_TYPES.CLOCKWISE;}
	/'CW' {return GeForMT.ROTATION_TYPES.CLOCKWISE;}
	/'COUNTERCLOCKWISE' {return GeForMT.ROTATION_TYPES.COUNTERCLOCKWISE;}
	/'CCW' {return GeForMT.ROTATION_TYPES.COUNTERCLOCKWISE;}

integer = first_digit:[1-9] last_digits:[0-9]*  
		{	var digits=String(first_digit)+String(last_digits.join(""));
			return parseInt(digits,10);
		}
 */
 PEG.GeneratedGeForMTParser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "atom": parse_atom,
        "atomfocus": parse_atomfocus,
        "complex": parse_complex,
        "definition": parse_definition,
        "direction": parse_direction,
        "focus": parse_focus,
        "focuslist": parse_focuslist,
        "function": parse_function,
        "gesture": parse_gesture,
        "identifier": parse_identifier,
        "integer": parse_integer,
        "operator": parse_operator,
        "option": parse_option,
        "relation": parse_relation,
        "rotation": parse_rotation,
        "shape": parse_shape,
        "vector": parse_vector
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "definition";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_definition() {
        var cacheKey = 'definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_complex();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse_option();
          if (result6 !== null) {
            var result7 = parse_complex();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse_option();
            if (result6 !== null) {
              var result7 = parse_complex();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(complex, opt) {	var definition={options: []};
           			definition.options.push(complex);
           			for (var i=0;i<opt.length;i++){
           				definition.options.push(opt[i][1]);
           			}
           			return definition;
          		})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_complex() {
        var cacheKey = 'complex@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        var result15 = parse_gesture();
        if (result15 !== null) {
          var result16 = [];
          var savedPos5 = pos;
          var result18 = parse_operator();
          if (result18 !== null) {
            var result19 = parse_gesture();
            if (result19 !== null) {
              var result17 = [result18, result19];
            } else {
              var result17 = null;
              pos = savedPos5;
            }
          } else {
            var result17 = null;
            pos = savedPos5;
          }
          while (result17 !== null) {
            result16.push(result17);
            var savedPos5 = pos;
            var result18 = parse_operator();
            if (result18 !== null) {
              var result19 = parse_gesture();
              if (result19 !== null) {
                var result17 = [result18, result19];
              } else {
                var result17 = null;
                pos = savedPos5;
              }
            } else {
              var result17 = null;
              pos = savedPos5;
            }
          }
          if (result16 !== null) {
            var result13 = [result15, result16];
          } else {
            var result13 = null;
            pos = savedPos4;
          }
        } else {
          var result13 = null;
          pos = savedPos4;
        }
        var result14 = result13 !== null
          ? (function(gesture, gestures) {	var complex = {relation:null,gestures:[]};
          			complex.gestures.push(gesture);
          			for(var i=0;i<gestures.length;i++){		
          				complex.gestures.push(gestures[i][1]);
          				gestures[i][1].operation=gestures[i][0];
          			}
          		return complex;		
          		})(result13[0], result13[1])
          : null;
        if (result14 !== null) {
          var result12 = result14;
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_relation();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "[") {
              var result5 = "[";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_gesture();
              if (result6 !== null) {
                var result7 = [];
                var savedPos2 = pos;
                var result10 = parse_operator();
                if (result10 !== null) {
                  var result11 = parse_gesture();
                  if (result11 !== null) {
                    var result9 = [result10, result11];
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                while (result9 !== null) {
                  result7.push(result9);
                  var savedPos2 = pos;
                  var result10 = parse_operator();
                  if (result10 !== null) {
                    var result11 = parse_gesture();
                    if (result11 !== null) {
                      var result9 = [result10, result11];
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result8 = "]";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(rel, gesture, gestures) {	var complex = {relation:rel,gestures:[]};
            			complex.gestures.push(gesture);
            			for(var i=0;i<gestures.length;i++){
            				complex.gestures.push(gestures[i][1]);
            				gestures[i][1].operation=gestures[i][0];
            			}
            			return complex;
            		})(result2[0], result2[2], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_gesture() {
        var cacheKey = 'gesture@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        var result12 = parse_function();
        if (result12 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result13 = "(";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result13 !== null) {
            var result14 = parse_atomfocus();
            if (result14 !== null) {
              var result15 = [];
              var savedPos5 = pos;
              if (input.substr(pos, 1) === ",") {
                var result18 = ",";
                pos += 1;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result18 !== null) {
                var result19 = parse_atomfocus();
                if (result19 !== null) {
                  var result17 = [result18, result19];
                } else {
                  var result17 = null;
                  pos = savedPos5;
                }
              } else {
                var result17 = null;
                pos = savedPos5;
              }
              while (result17 !== null) {
                result15.push(result17);
                var savedPos5 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result18 = ",";
                  pos += 1;
                } else {
                  var result18 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result18 !== null) {
                  var result19 = parse_atomfocus();
                  if (result19 !== null) {
                    var result17 = [result18, result19];
                  } else {
                    var result17 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos5;
                }
              }
              if (result15 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result16 = ")";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result16 !== null) {
                  var result10 = [result12, result13, result14, result15, result16];
                } else {
                  var result10 = null;
                  pos = savedPos4;
                }
              } else {
                var result10 = null;
                pos = savedPos4;
              }
            } else {
              var result10 = null;
              pos = savedPos4;
            }
          } else {
            var result10 = null;
            pos = savedPos4;
          }
        } else {
          var result10 = null;
          pos = savedPos4;
        }
        var result11 = result10 !== null
          ? (function(func, afo, afos) {	var gesture={funct:func,atomfocus: []};
          			gesture.atomfocus.push(afo);
          			for(var i=0;i<afos.length;i++){
          				gesture.atomfocus.push(afos[i][1]);
          			}
          			return gesture;
          		})(result10[0], result10[2], result10[3])
          : null;
        if (result11 !== null) {
          var result9 = result11;
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_atomfocus();
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_atomfocus();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_atomfocus();
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(afo, afos) {	var gesture= {funct:null,atomfocus: []};
            			gesture.atomfocus.push(afo);
            			for(var i=0;i<afos.length;i++){
            				gesture.atomfocus.push(afos[i][1]);
            			}
            			return gesture;
            		})(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relation() {
        var cacheKey = 'relation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos8 = pos;
        if (input.substr(pos, 5) === "CROSS") {
          var result26 = "CROSS";
          pos += 5;
        } else {
          var result26 = null;
          if (reportMatchFailures) {
            matchFailed("\"CROSS\"");
          }
        }
        var result27 = result26 !== null
          ? (function() {return GeForMT.RELATION_TYPES.CROSS;})()
          : null;
        if (result27 !== null) {
          var result25 = result27;
        } else {
          var result25 = null;
          pos = savedPos8;
        }
        if (result25 !== null) {
          var result0 = result25;
        } else {
          var savedPos7 = pos;
          if (input.substr(pos, 4) === "JOIN") {
            var result23 = "JOIN";
            pos += 4;
          } else {
            var result23 = null;
            if (reportMatchFailures) {
              matchFailed("\"JOIN\"");
            }
          }
          var result24 = result23 !== null
            ? (function() {return GeForMT.RELATION_TYPES.JOIN;})()
            : null;
          if (result24 !== null) {
            var result22 = result24;
          } else {
            var result22 = null;
            pos = savedPos7;
          }
          if (result22 !== null) {
            var result0 = result22;
          } else {
            var savedPos6 = pos;
            if (input.substr(pos, 4) === "SYNC") {
              var result20 = "SYNC";
              pos += 4;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"SYNC\"");
              }
            }
            var result21 = result20 !== null
              ? (function() {return GeForMT.RELATION_TYPES.SYNC;})()
              : null;
            if (result21 !== null) {
              var result19 = result21;
            } else {
              var result19 = null;
              pos = savedPos6;
            }
            if (result19 !== null) {
              var result0 = result19;
            } else {
              var savedPos5 = pos;
              if (input.substr(pos, 5) === "SPLIT") {
                var result17 = "SPLIT";
                pos += 5;
              } else {
                var result17 = null;
                if (reportMatchFailures) {
                  matchFailed("\"SPLIT\"");
                }
              }
              var result18 = result17 !== null
                ? (function() {return GeForMT.RELATION_TYPES.SPLIT;})()
                : null;
              if (result18 !== null) {
                var result16 = result18;
              } else {
                var result16 = null;
                pos = savedPos5;
              }
              if (result16 !== null) {
                var result0 = result16;
              } else {
                var savedPos4 = pos;
                if (input.substr(pos, 13) === "CONNECT_START") {
                  var result14 = "CONNECT_START";
                  pos += 13;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"CONNECT_START\"");
                  }
                }
                var result15 = result14 !== null
                  ? (function() {return GeForMT.RELATION_TYPES.CONNECT_START;})()
                  : null;
                if (result15 !== null) {
                  var result13 = result15;
                } else {
                  var result13 = null;
                  pos = savedPos4;
                }
                if (result13 !== null) {
                  var result0 = result13;
                } else {
                  var savedPos3 = pos;
                  if (input.substr(pos, 11) === "CONNECT_END") {
                    var result11 = "CONNECT_END";
                    pos += 11;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"CONNECT_END\"");
                    }
                  }
                  var result12 = result11 !== null
                    ? (function() {return GeForMT.RELATION_TYPES.CONNECT_END;})()
                    : null;
                  if (result12 !== null) {
                    var result10 = result12;
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  if (result10 !== null) {
                    var result0 = result10;
                  } else {
                    var savedPos2 = pos;
                    if (input.substr(pos, 5) === "AMONG") {
                      var result8 = "AMONG";
                      pos += 5;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"AMONG\"");
                      }
                    }
                    var result9 = result8 !== null
                      ? (function() {return GeForMT.RELATION_TYPES.AMONG;})()
                      : null;
                    if (result9 !== null) {
                      var result7 = result9;
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      var savedPos1 = pos;
                      if (input.substr(pos, 5) === "ASIDE") {
                        var result5 = "ASIDE";
                        pos += 5;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"ASIDE\"");
                        }
                      }
                      var result6 = result5 !== null
                        ? (function() {return GeForMT.RELATION_TYPES.ASIDE;})()
                        : null;
                      if (result6 !== null) {
                        var result4 = result6;
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                      if (result4 !== null) {
                        var result0 = result4;
                      } else {
                        var savedPos0 = pos;
                        if (input.substr(pos, 5) === "CLOSE") {
                          var result2 = "CLOSE";
                          pos += 5;
                        } else {
                          var result2 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"CLOSE\"");
                          }
                        }
                        var result3 = result2 !== null
                          ? (function() {return GeForMT.RELATION_TYPES.CLOSE;})()
                          : null;
                        if (result3 !== null) {
                          var result1 = result3;
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_atomfocus() {
        var cacheKey = 'atomfocus@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_atom();
        if (result7 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result8 = "(";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result8 !== null) {
            var result9 = parse_focuslist();
            if (result9 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result10 = ")";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result10 !== null) {
                var result5 = [result7, result8, result9, result10];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(atom, focus) {	return {atom:atom,focuslist:focus};})(result5[0], result5[2])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_atom();
          var result3 = result2 !== null
            ? (function(atom) {	return {atom:atom,focuslist:[]};})(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_focuslist() {
        var cacheKey = 'focuslist@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_focus();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ",") {
            var result6 = ",";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_focus();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_focus();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(focus, list) {	var focuslist=[];
          			focuslist.push(focus);
          			for(var i=0;i<list.length;i++){
          				focuslist.push(list[i][1]);
          			}
          			return focuslist;
          		})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_focus() {
        var cacheKey = 'focus@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[A-Za-z0-9#.:=|[\]*_\s\-]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Za-z0-9#.:=|[\\]*_\\s\\-]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[A-Za-z0-9#.:=|[\]*_\s\-]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z0-9#.:=|[\\]*_\\s\\-]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(focus) {	return focus.join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function() {
        var cacheKey = 'function@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result18 = parse_integer();
        var result16 = result18 !== null ? result18 : '';
        if (result16 !== null) {
          if (input.substr(pos, 1) === "F") {
            var result17 = "F";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"F\"");
            }
          }
          if (result17 !== null) {
            var result14 = [result16, result17];
          } else {
            var result14 = null;
            pos = savedPos5;
          }
        } else {
          var result14 = null;
          pos = savedPos5;
        }
        var result15 = result14 !== null
          ? (function(num, functionType) {	var func = {type:GeForMT.FUNCTION_TYPES.FINGER,number:null};
          			if(typeof num != 'undefined') func['number']=num;
          			return func;
          		})(result14[0], result14[1])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos4;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result12 = parse_integer();
          var result10 = result12 !== null ? result12 : '';
          if (result10 !== null) {
            if (input.substr(pos, 1) === "H") {
              var result11 = "H";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"H\"");
              }
            }
            if (result11 !== null) {
              var result8 = [result10, result11];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(num, functionType) {	var func = {type:GeForMT.FUNCTION_TYPES.HAND,number:null};
            			if(typeof num != 'undefined') func['number']=num;
            			return func;
            		})(result8[0], result8[1])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result6 = parse_integer();
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              if (input.substr(pos, 1) === "B") {
                var result5 = "B";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"B\"");
                }
              }
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(num, functionType) {	var func = {type:GeForMT.FUNCTION_TYPES.BLOB,number:null};
              			if(typeof num != 'undefined') func['number']=num;
              			return func;
              		})(result2[0], result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operator() {
        var cacheKey = 'operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "*") {
          var result11 = "*";
          pos += 1;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        var result12 = result11 !== null
          ? (function() {  return GeForMT.OPERATION_TYPES.ASTERISK;})()
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "+") {
            var result8 = "+";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          var result9 = result8 !== null
            ? (function() {  return GeForMT.OPERATION_TYPES.PLUS;})()
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result5 = ",";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            var result6 = result5 !== null
              ? (function() {  return GeForMT.OPERATION_TYPES.COMMA;})()
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === ";") {
                var result2 = ";";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              var result3 = result2 !== null
                ? (function() {  return GeForMT.OPERATION_TYPES.SEMICOLON;})()
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_option() {
        var cacheKey = 'option@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "|") {
          var result1 = "|";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"|\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {  return GeForMT.OPERATION_TYPES.OPTION;})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_atom() {
        var cacheKey = 'atom@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos7 = pos;
        var result22 = parse_identifier();
        var result23 = result22 !== null
          ? (function(identifier) {	var atom = {type:identifier};
          			return atom;
          		})(result22)
          : null;
        if (result23 !== null) {
          var result21 = result23;
        } else {
          var result21 = null;
          pos = savedPos7;
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result16 = parse_vector();
          if (result16 !== null) {
            var savedPos6 = pos;
            if (input.substr(pos, 1) === "_") {
              var result19 = "_";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"_\"");
              }
            }
            if (result19 !== null) {
              var result20 = parse_direction();
              if (result20 !== null) {
                var result18 = [result19, result20];
              } else {
                var result18 = null;
                pos = savedPos6;
              }
            } else {
              var result18 = null;
              pos = savedPos6;
            }
            var result17 = result18 !== null ? result18 : '';
            if (result17 !== null) {
              var result14 = [result16, result17];
            } else {
              var result14 = null;
              pos = savedPos5;
            }
          } else {
            var result14 = null;
            pos = savedPos5;
          }
          var result15 = result14 !== null
            ? (function(vector, directionType) {	var atom={type: vector, direction: null};
            			if(typeof directionType != 'undefined') 
            				atom['direction']=directionType[1];
            			return atom;
            		})(result14[0], result14[1])
            : null;
          if (result15 !== null) {
            var result13 = result15;
          } else {
            var result13 = null;
            pos = savedPos4;
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_shape();
            if (result4 !== null) {
              var savedPos3 = pos;
              if (input.substr(pos, 1) === "_") {
                var result11 = "_";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"_\"");
                }
              }
              if (result11 !== null) {
                var result12 = parse_direction();
                if (result12 !== null) {
                  var result10 = [result11, result12];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
              var result5 = result10 !== null ? result10 : '';
              if (result5 !== null) {
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "_") {
                  var result8 = "_";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"_\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = parse_rotation();
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                var result6 = result7 !== null ? result7 : '';
                if (result6 !== null) {
                  var result2 = [result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(shape, directionType, rotationType) {	var atom={type: shape, direction: null, rotation: null};
              			if(typeof directionType != 'undefined')
              				atom['direction']=directionType[1];
              			if(typeof rotationType != 'undefined') 
              				atom['rotation']=rotationType[1];
              			return atom;
              		})(result2[0], result2[1], result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 4) === "MOVE") {
          var result11 = "MOVE";
          pos += 4;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"MOVE\"");
          }
        }
        var result12 = result11 !== null
          ? (function() {return GeForMT.CONTACT_TYPES.MOVE;})()
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 5) === "POINT") {
            var result8 = "POINT";
            pos += 5;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"POINT\"");
            }
          }
          var result9 = result8 !== null
            ? (function() {return GeForMT.CONTACT_TYPES.POINT;})()
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 7) === "DEPOINT") {
              var result5 = "DEPOINT";
              pos += 7;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"DEPOINT\"");
              }
            }
            var result6 = result5 !== null
              ? (function() {return GeForMT.CONTACT_TYPES.DEPOINT;})()
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 4) === "HOLD") {
                var result2 = "HOLD";
                pos += 4;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"HOLD\"");
                }
              }
              var result3 = result2 !== null
                ? (function() {return GeForMT.CONTACT_TYPES.HOLD;})()
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vector() {
        var cacheKey = 'vector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "LINE") {
          var result1 = "LINE";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"LINE\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {return GeForMT.VECTOR_TYPES.LINE;})()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_shape() {
        var cacheKey = 'shape@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "CIRCLE") {
          var result5 = "CIRCLE";
          pos += 6;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"CIRCLE\"");
          }
        }
        var result6 = result5 !== null
          ? (function() {return GeForMT.SHAPE_TYPES.CIRCLE;})()
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 10) === "SEMICIRCLE") {
            var result2 = "SEMICIRCLE";
            pos += 10;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"SEMICIRCLE\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {return GeForMT.SHAPE_TYPES.SEMICIRCLE;})()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_direction() {
        var cacheKey = 'direction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos19 = pos;
        if (input.substr(pos, 5) === "NORTH") {
          var result59 = "NORTH";
          pos += 5;
        } else {
          var result59 = null;
          if (reportMatchFailures) {
            matchFailed("\"NORTH\"");
          }
        }
        var result60 = result59 !== null
          ? (function() {return GeForMT.DIRECTION_TYPES.NORTH;})()
          : null;
        if (result60 !== null) {
          var result58 = result60;
        } else {
          var result58 = null;
          pos = savedPos19;
        }
        if (result58 !== null) {
          var result0 = result58;
        } else {
          var savedPos18 = pos;
          if (input.substr(pos, 9) === "NORTHEAST") {
            var result56 = "NORTHEAST";
            pos += 9;
          } else {
            var result56 = null;
            if (reportMatchFailures) {
              matchFailed("\"NORTHEAST\"");
            }
          }
          var result57 = result56 !== null
            ? (function() {return GeForMT.DIRECTION_TYPES.NORTHEAST;})()
            : null;
          if (result57 !== null) {
            var result55 = result57;
          } else {
            var result55 = null;
            pos = savedPos18;
          }
          if (result55 !== null) {
            var result0 = result55;
          } else {
            var savedPos17 = pos;
            if (input.substr(pos, 4) === "EAST") {
              var result53 = "EAST";
              pos += 4;
            } else {
              var result53 = null;
              if (reportMatchFailures) {
                matchFailed("\"EAST\"");
              }
            }
            var result54 = result53 !== null
              ? (function() {return GeForMT.DIRECTION_TYPES.EAST;})()
              : null;
            if (result54 !== null) {
              var result52 = result54;
            } else {
              var result52 = null;
              pos = savedPos17;
            }
            if (result52 !== null) {
              var result0 = result52;
            } else {
              var savedPos16 = pos;
              if (input.substr(pos, 9) === "SOUTHEAST") {
                var result50 = "SOUTHEAST";
                pos += 9;
              } else {
                var result50 = null;
                if (reportMatchFailures) {
                  matchFailed("\"SOUTHEAST\"");
                }
              }
              var result51 = result50 !== null
                ? (function() {return GeForMT.DIRECTION_TYPES.SOUTHEAST;})()
                : null;
              if (result51 !== null) {
                var result49 = result51;
              } else {
                var result49 = null;
                pos = savedPos16;
              }
              if (result49 !== null) {
                var result0 = result49;
              } else {
                var savedPos15 = pos;
                if (input.substr(pos, 5) === "SOUTH") {
                  var result47 = "SOUTH";
                  pos += 5;
                } else {
                  var result47 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"SOUTH\"");
                  }
                }
                var result48 = result47 !== null
                  ? (function() {return GeForMT.DIRECTION_TYPES.SOUTH;})()
                  : null;
                if (result48 !== null) {
                  var result46 = result48;
                } else {
                  var result46 = null;
                  pos = savedPos15;
                }
                if (result46 !== null) {
                  var result0 = result46;
                } else {
                  var savedPos14 = pos;
                  if (input.substr(pos, 9) === "SOUTHWEST") {
                    var result44 = "SOUTHWEST";
                    pos += 9;
                  } else {
                    var result44 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"SOUTHWEST\"");
                    }
                  }
                  var result45 = result44 !== null
                    ? (function() {return GeForMT.DIRECTION_TYPES.SOUTHWEST;})()
                    : null;
                  if (result45 !== null) {
                    var result43 = result45;
                  } else {
                    var result43 = null;
                    pos = savedPos14;
                  }
                  if (result43 !== null) {
                    var result0 = result43;
                  } else {
                    var savedPos13 = pos;
                    if (input.substr(pos, 4) === "WEST") {
                      var result41 = "WEST";
                      pos += 4;
                    } else {
                      var result41 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"WEST\"");
                      }
                    }
                    var result42 = result41 !== null
                      ? (function() {return GeForMT.DIRECTION_TYPES.WEST;})()
                      : null;
                    if (result42 !== null) {
                      var result40 = result42;
                    } else {
                      var result40 = null;
                      pos = savedPos13;
                    }
                    if (result40 !== null) {
                      var result0 = result40;
                    } else {
                      var savedPos12 = pos;
                      if (input.substr(pos, 9) === "NORTHWEST") {
                        var result38 = "NORTHWEST";
                        pos += 9;
                      } else {
                        var result38 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"NORTHWEST\"");
                        }
                      }
                      var result39 = result38 !== null
                        ? (function() {return GeForMT.DIRECTION_TYPES.NORTHWEST;})()
                        : null;
                      if (result39 !== null) {
                        var result37 = result39;
                      } else {
                        var result37 = null;
                        pos = savedPos12;
                      }
                      if (result37 !== null) {
                        var result0 = result37;
                      } else {
                        var savedPos11 = pos;
                        if (input.substr(pos, 2) === "NE") {
                          var result35 = "NE";
                          pos += 2;
                        } else {
                          var result35 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"NE\"");
                          }
                        }
                        var result36 = result35 !== null
                          ? (function() {return GeForMT.DIRECTION_TYPES.NORTHEAST;})()
                          : null;
                        if (result36 !== null) {
                          var result34 = result36;
                        } else {
                          var result34 = null;
                          pos = savedPos11;
                        }
                        if (result34 !== null) {
                          var result0 = result34;
                        } else {
                          var savedPos10 = pos;
                          if (input.substr(pos, 2) === "SE") {
                            var result32 = "SE";
                            pos += 2;
                          } else {
                            var result32 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"SE\"");
                            }
                          }
                          var result33 = result32 !== null
                            ? (function() {return GeForMT.DIRECTION_TYPES.SOUTHEAST;})()
                            : null;
                          if (result33 !== null) {
                            var result31 = result33;
                          } else {
                            var result31 = null;
                            pos = savedPos10;
                          }
                          if (result31 !== null) {
                            var result0 = result31;
                          } else {
                            var savedPos9 = pos;
                            if (input.substr(pos, 2) === "SW") {
                              var result29 = "SW";
                              pos += 2;
                            } else {
                              var result29 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"SW\"");
                              }
                            }
                            var result30 = result29 !== null
                              ? (function() {return GeForMT.DIRECTION_TYPES.SOUTHWEST;})()
                              : null;
                            if (result30 !== null) {
                              var result28 = result30;
                            } else {
                              var result28 = null;
                              pos = savedPos9;
                            }
                            if (result28 !== null) {
                              var result0 = result28;
                            } else {
                              var savedPos8 = pos;
                              if (input.substr(pos, 2) === "NW") {
                                var result26 = "NW";
                                pos += 2;
                              } else {
                                var result26 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"NW\"");
                                }
                              }
                              var result27 = result26 !== null
                                ? (function() {return GeForMT.DIRECTION_TYPES.NORTHWEST;})()
                                : null;
                              if (result27 !== null) {
                                var result25 = result27;
                              } else {
                                var result25 = null;
                                pos = savedPos8;
                              }
                              if (result25 !== null) {
                                var result0 = result25;
                              } else {
                                var savedPos7 = pos;
                                if (input.substr(pos, 2) === "N\xB0") {
                                  var result23 = "N\xB0";
                                  pos += 2;
                                } else {
                                  var result23 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"N\\xB0\"");
                                  }
                                }
                                var result24 = result23 !== null
                                  ? (function() {return GeForMT.DIRECTION_TYPES.TEND_NORTH;})()
                                  : null;
                                if (result24 !== null) {
                                  var result22 = result24;
                                } else {
                                  var result22 = null;
                                  pos = savedPos7;
                                }
                                if (result22 !== null) {
                                  var result0 = result22;
                                } else {
                                  var savedPos6 = pos;
                                  if (input.substr(pos, 1) === "N") {
                                    var result20 = "N";
                                    pos += 1;
                                  } else {
                                    var result20 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"N\"");
                                    }
                                  }
                                  var result21 = result20 !== null
                                    ? (function() {return GeForMT.DIRECTION_TYPES.NORTH;})()
                                    : null;
                                  if (result21 !== null) {
                                    var result19 = result21;
                                  } else {
                                    var result19 = null;
                                    pos = savedPos6;
                                  }
                                  if (result19 !== null) {
                                    var result0 = result19;
                                  } else {
                                    var savedPos5 = pos;
                                    if (input.substr(pos, 2) === "E\xB0") {
                                      var result17 = "E\xB0";
                                      pos += 2;
                                    } else {
                                      var result17 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"E\\xB0\"");
                                      }
                                    }
                                    var result18 = result17 !== null
                                      ? (function() {return GeForMT.DIRECTION_TYPES.TEND_EAST;})()
                                      : null;
                                    if (result18 !== null) {
                                      var result16 = result18;
                                    } else {
                                      var result16 = null;
                                      pos = savedPos5;
                                    }
                                    if (result16 !== null) {
                                      var result0 = result16;
                                    } else {
                                      var savedPos4 = pos;
                                      if (input.substr(pos, 1) === "E") {
                                        var result14 = "E";
                                        pos += 1;
                                      } else {
                                        var result14 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"E\"");
                                        }
                                      }
                                      var result15 = result14 !== null
                                        ? (function() {return GeForMT.DIRECTION_TYPES.EAST;})()
                                        : null;
                                      if (result15 !== null) {
                                        var result13 = result15;
                                      } else {
                                        var result13 = null;
                                        pos = savedPos4;
                                      }
                                      if (result13 !== null) {
                                        var result0 = result13;
                                      } else {
                                        var savedPos3 = pos;
                                        if (input.substr(pos, 2) === "W\xB0") {
                                          var result11 = "W\xB0";
                                          pos += 2;
                                        } else {
                                          var result11 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"W\\xB0\"");
                                          }
                                        }
                                        var result12 = result11 !== null
                                          ? (function() {return GeForMT.DIRECTION_TYPES.TEND_WEST;})()
                                          : null;
                                        if (result12 !== null) {
                                          var result10 = result12;
                                        } else {
                                          var result10 = null;
                                          pos = savedPos3;
                                        }
                                        if (result10 !== null) {
                                          var result0 = result10;
                                        } else {
                                          var savedPos2 = pos;
                                          if (input.substr(pos, 1) === "W") {
                                            var result8 = "W";
                                            pos += 1;
                                          } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"W\"");
                                            }
                                          }
                                          var result9 = result8 !== null
                                            ? (function() {return GeForMT.DIRECTION_TYPES.WEST;})()
                                            : null;
                                          if (result9 !== null) {
                                            var result7 = result9;
                                          } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                          }
                                          if (result7 !== null) {
                                            var result0 = result7;
                                          } else {
                                            var savedPos1 = pos;
                                            if (input.substr(pos, 2) === "S\xB0") {
                                              var result5 = "S\xB0";
                                              pos += 2;
                                            } else {
                                              var result5 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"S\\xB0\"");
                                              }
                                            }
                                            var result6 = result5 !== null
                                              ? (function() {return GeForMT.DIRECTION_TYPES.TEND_SOUTH;})()
                                              : null;
                                            if (result6 !== null) {
                                              var result4 = result6;
                                            } else {
                                              var result4 = null;
                                              pos = savedPos1;
                                            }
                                            if (result4 !== null) {
                                              var result0 = result4;
                                            } else {
                                              var savedPos0 = pos;
                                              if (input.substr(pos, 1) === "S") {
                                                var result2 = "S";
                                                pos += 1;
                                              } else {
                                                var result2 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"S\"");
                                                }
                                              }
                                              var result3 = result2 !== null
                                                ? (function() {return GeForMT.DIRECTION_TYPES.SOUTH;})()
                                                : null;
                                              if (result3 !== null) {
                                                var result1 = result3;
                                              } else {
                                                var result1 = null;
                                                pos = savedPos0;
                                              }
                                              if (result1 !== null) {
                                                var result0 = result1;
                                              } else {
                                                var result0 = null;;
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rotation() {
        var cacheKey = 'rotation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 9) === "CLOCKWISE") {
          var result11 = "CLOCKWISE";
          pos += 9;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"CLOCKWISE\"");
          }
        }
        var result12 = result11 !== null
          ? (function() {return GeForMT.ROTATION_TYPES.CLOCKWISE;})()
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 2) === "CW") {
            var result8 = "CW";
            pos += 2;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"CW\"");
            }
          }
          var result9 = result8 !== null
            ? (function() {return GeForMT.ROTATION_TYPES.CLOCKWISE;})()
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 16) === "COUNTERCLOCKWISE") {
              var result5 = "COUNTERCLOCKWISE";
              pos += 16;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"COUNTERCLOCKWISE\"");
              }
            }
            var result6 = result5 !== null
              ? (function() {return GeForMT.ROTATION_TYPES.COUNTERCLOCKWISE;})()
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 3) === "CCW") {
                var result2 = "CCW";
                pos += 3;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"CCW\"");
                }
              }
              var result3 = result2 !== null
                ? (function() {return GeForMT.ROTATION_TYPES.COUNTERCLOCKWISE;})()
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[1-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[1-9]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first_digit, last_digits) {	var digits=String(first_digit)+String(last_digits.join(""));
          			return parseInt(digits,10);
          		})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
 